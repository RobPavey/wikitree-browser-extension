/*
MIT License

Copyright (c) 2020 Robert M Pavey

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/*
Created By: Rob Pavey (Pavey-429)
*/

<<<<<<< HEAD
/*
Created By: Rob Pavey (Pavey-429)
*/

=======
>>>>>>> e8f615c4f2f1119464034619121d52d602d1d4e2
import { checkIfFeatureEnabled, getFeatureOptions } from "../../core/options/options_storage";

// file level variables
var agcButton = undefined;
var isBioEdited = false;
var origBioText = "";
var origBirthDate = "";
var origBirthDateIsBefore = false;
var origDeathDate = "";
var origDeathDateIsBefore = false;

var origFirstName = "";
var origPrefName = "";
var origMiddleName = "";
var origCurrentLastName = "";

var lastReformattedBioText = ""; // used to check if edited when we do undo
var bioTextWhenUndoWarningDisplayed = "";

var errorDialog = undefined;

///////////////////////////////////////////////////////////////////////////
// The section below is to handle MV3
// There are two conflicting issues:
// 1. In MV3 we can't dynamically load the editbio module because of service worker rules
// 2. In Early version of Firefox we can't dynamically load the module here
///////////////////////////////////////////////////////////////////////////
var isEditBioModuleLoaded = false;
var loadedEditBioModule = undefined;

function callModuleEditBio(editBioInput, sendResponse) {
  editBioInput.runDate = new Date(editBioInput.runDate); // because of JSON serialization
  let editBioOutput = loadedEditBioModule.editBio(editBioInput);
  sendResponse({ editBioOutput: editBioOutput });
}

async function doImportAndEditBio(editBioInput, sendResponse) {
  loadedEditBioModule = await import("./library/editbio");
  isEditBioModuleLoaded = true;
  callModuleEditBio(editBioInput, sendResponse);
}

function asyncLoadScriptAndCallEditBio(editBioInput, sendResponse) {
  if (isEditBioModuleLoaded) {
    //console.log("asyncLoadScriptAndCallEditBio, module already loaded");
    callModuleEditBio(editBioInput, sendResponse);
  } else {
    // This asyncronously loads the editbio.mjs module and, once it loads it calls editbio
    doImportAndEditBio(editBioInput, sendResponse);
  }
}

async function useModuleToEditBio(editBioInput, callback) {
  asyncLoadScriptAndCallEditBio(editBioInput, callback);
}

function checkForGedcomCreatedProfile() {
  var textbox = document.getElementById("wpTextbox1");

  if (!textbox) {
    return false;
  }

  var bio = textbox.value;

  if (bio.includes("auto-generated by a GEDCOM import")) {
    if (
      bio.includes(
        "''This biography is a rough draft. It was auto-generated by a GEDCOM import and needs to be edited.''"
      )
    ) {
      return true;
    }

    if (
      bio.includes(
        "''This biography was auto-generated by a GEDCOM import. It's a rough draft and needs to be edited.''"
      )
    ) {
      return true;
    }

    // sometimes there is a <ref> after the work import.
    if (bio.includes("''This biography was auto-generated by a GEDCOM import.")) {
      return true;
    }
  } else if (bio.includes("This person was created through the import")) {
    if (bio.includes("The following data was included in the gedcom. You may wish to edit it for readability.")) {
      return true;
    }
  } else if (bio.search(/This person was created on \d+ \w+ \d+ through the import of /) != -1) {
    if (bio.includes(".ged")) {
      return true;
    }
  } else if (bio.search(/\<ref\>[^-]+\-\d+ was created by \[\[[^\]]+\]\] through the import of /) != -1) {
    if (
      bio.includes(
        "This comment and citation should be deleted after a short biography has been added and primary sources have been cited"
      )
    ) {
      return true;
    }
  }
  // WikiTree profile Di Rocco-2 created through the import of Collier, Centola, Di Rocco, Po(1).ged on Oct 14, 2011 by [[Collier-494 | Michael Collier]]. See the [http://www.wikitree.com/index.php?title=Special:NetworkFeed&who=Di Rocco-2 Changes page] for the details of edits by Michael and others.
  else if (bio.search(/WikiTree profile [^-]+\-\d+ created through the import of /) != -1) {
    if (bio.includes(".ged")) {
      return true;
    }
  }

  var nameTitleIndex = bio.indexOf("'''Name:'''");
  var bornTitleIndex = bio.indexOf("'''Born'''");
  var diedTitleIndex = bio.indexOf("'''Died'''");
  if (nameTitleIndex != -1 || bornTitleIndex != -1 || diedTitleIndex != -1) {
    return true;
  }

  nameTitleIndex = bio.indexOf("=== Name ===");
  bornTitleIndex = bio.indexOf("=== Birth ===");
  diedTitleIndex = bio.indexOf("=== Death ===");
  if (nameTitleIndex != -1 || bornTitleIndex != -1 || diedTitleIndex != -1) {
    return true;
  }

  const userIdIndex = bio.indexOf("=== User ID ===");
  const dataChangedIndex = bio.indexOf("=== Data Changed ===");
  if (userIdIndex != -1 || dataChangedIndex != -1) {
    return true;
  }

  return false;
}

function getParentsFromDocument(document, parents) {
  const fcos = document.getElementsByClassName("five columns omega");
  if (fcos.length == 0) return;
  const fco = fcos.item(0);

  const tableElements = fco.getElementsByTagName("table");
  if (tableElements.length == 0) return;
  const table = tableElements.item(0);

  const tableBodyElements = table.getElementsByTagName("tbody");
  if (tableBodyElements.length == 0) return;
  const tableBody = tableBodyElements.item(0);

  var rows = tableBody.getElementsByTagName("tr");
  if (rows.length == 0) return;

  // we now have the table rows. Usually the father is row 0 and mother is row 1.
  var row = rows.item(0);

  var link = undefined;
  var tdTitle = undefined;

  function getLinkAndTitle() {
    var tds = row.getElementsByTagName("td");
    if (tds.length < 2) return false;
    tdTitle = tds.item(0);
    var tdLink = tds.item(1);

    const divs = tdLink.getElementsByTagName("div");
    if (divs.length == 0) return false;
    const div = divs.item(0);

    const links = tdLink.getElementsByTagName("a");
    if (links.length == 0) return false;
    link = links.item(0);

    return true;
  }

  var foundParent = getLinkAndTitle();

  if (foundParent && tdTitle.textContent.includes("Father")) {
    const fatherName = link.text;
    const fatherWikiId = link.pathname.replace("/wiki/", "");
    parents.father = { name: fatherName, wikiId: fatherWikiId };

    if (rows.length > 1) {
      row = rows.item(1);
      foundParent = getLinkAndTitle();
    }
  }

  if (foundParent && tdTitle.textContent.includes("Mother")) {
    const motherName = link.text;
    const motherWikiId = link.pathname.replace("/wiki/", "");
    parents.mother = { name: motherName, wikiId: motherWikiId };
  }
}

async function updateButton() {
  if (agcButton != undefined) {
    if (isBioEdited) {
      agcButton.src = chrome.runtime.getURL("images/agc_undo.png");
    } else {
      agcButton.src = chrome.runtime.getURL("images/agc.png");
    }
  }
}

function removeErrorDialog() {
  if (errorDialog != undefined) {
    document.body.removeChild(errorDialog);
    errorDialog = undefined;
  }
}

function onErrorCloseButtonClicked() {
  removeErrorDialog();
}

function displayErrorDialog(editBioMessage) {
  // display error message in an orange popup window
  var errorMessage = "WikiTree AGC did not change the profile due to the following error: " + editBioMessage;

  /*
  Used to do this but it gets a warning on Firefox:

  var template = document.createElement('template');
  var html = '<div id="toast-container" class="toast-top-right">';
  html += '<div class="toast toast-info" aria-live="polite" style="display: block;">';
  html += '<button type="button" id="agc-close-error-button" class="toast-close-button" role="button">×</button>';
  html += '<div class="toast-message">' + errorMessage + '</div></div></div>';
  template.innerHTML = html;
  errorDialog = document.body.appendChild(template.content.firstChild);
*/

  var toastContainer = document.createElement("div");
  toastContainer.id = "toast-container";
  toastContainer.className = "toast-top-right";

  var toastInfo = document.createElement("div");
  toastInfo.className = "toast toast-info";
  //toastInfo.className = "toast-info";
  toastInfo.ariaLive = "polite";
  //toastInfo.setAttribute("style", "display: block;");
  //toastInfo.style = "display: block;";
  toastInfo.style.display = "block";
  toastContainer.appendChild(toastInfo);

  var closeButton = document.createElement("button");
  closeButton.setAttribute("type", "button");
  closeButton.id = "agc-close-error-button";
  closeButton.className = "toast-close-button";
  closeButton.setAttribute("role", "button");
  closeButton.textContent = "×";
  toastInfo.appendChild(closeButton);

  var toastMessage = document.createElement("div");
  toastMessage.className = "toast-message";
  toastMessage.textContent = errorMessage;
  toastInfo.appendChild(toastMessage);

  errorDialog = document.body.appendChild(toastContainer);

  closeButton.addEventListener("click", onErrorCloseButtonClicked, false);
}

async function doEditBio() {
  // Need to check if the enhanced editor is enabled and if so turn it off
  var enhancedEditorButton = document.getElementById("toggleMarkupColor");
  var enhancedEditorWasOn = false;
  if (enhancedEditorButton != undefined && enhancedEditorButton.value == "Turn Off Enhanced Editor") {
    enhancedEditorButton.click();
    enhancedEditorWasOn = true;
  }

  var textbox = document.getElementById("wpTextbox1");
  var bio = textbox.value;

  const firstNameTextbox = document.getElementById("mFirstName");
  var firstName = firstNameTextbox.value;

  const preferredNameTextbox = document.getElementById("mRealName");
  var prefName = preferredNameTextbox.value;

  const middleNameTextbox = document.getElementById("mMiddleName");
  var middleName = middleNameTextbox.value;

  const birthDateTextBox = document.getElementById("mBirthDate");
  const birthDateIsBefore = document.querySelector('input[name=mStatus_BirthDate][value="before"]').checked;
  const deathDateTextBox = document.getElementById("mDeathDate");
  const deathDateIsBefore = document.querySelector('input[name=mStatus_DeathDate][value="before"]').checked;

  const birthLocationTextBox = document.getElementById("mBirthLocation");
  const deathLocationTextBox = document.getElementById("mDeathLocation");

  const personGender = document.querySelector("select[name=mGender]").value;

  var parents = { father: undefined, mother: undefined };
  getParentsFromDocument(document, parents);

  // get current last name and last name at birth
  const currentLastName = document.getElementById("mLastNameCurrent").value;

  // Get Wiki ID from the "person" span item
  var profileWikiId = undefined;
  const personElements = document.getElementsByClassName("person");
  if (personElements.length == 1) {
    profileWikiId = personElements.item(0).textContent;
  }

  // Get Date object for today's date
  const runDateObject = new Date();

  // get the options from user storage
  const options = await getFeatureOptions("agc");

  const editBioInput = {
    wikiId: profileWikiId,
    birthDate: birthDateTextBox.value,
    birthDateIsBefore: birthDateIsBefore,
    birthLocation: birthLocationTextBox.value,
    deathDate: deathDateTextBox.value,
    deathDateIsBefore: deathDateIsBefore,
    deathLocation: deathLocationTextBox.value,
    personGender: personGender,
    firstName: firstName,
    prefName: prefName,
    middleName: middleName,
    currentLastName: currentLastName,
    bioText: bio,
    runDate: runDateObject,
    parents: parents,
    options: options,
  };

  // NOTE: In Firefox we can't dynamically load the editBio.mjs module in the content script
  // so we now send a message to the background script to load it and call editBio.
  useModuleToEditBio(editBioInput, function (response) {
    let editBioOutput = response.editBioOutput;

    if (editBioOutput.succeeded) {
      textbox.value = editBioOutput.bioText;

      // These values are used for undo
      isBioEdited = true;
      origBioText = editBioInput.bioText;
      origBirthDate = editBioInput.birthDate;
      origBirthDateIsBefore = editBioInput.birthDateIsBefore;
      origDeathDate = editBioInput.deathDate;
      origDeathDateIsBefore = editBioInput.deathDateIsBefore;
      origFirstName = editBioInput.firstName;
      origPrefName = editBioInput.prefName;
      origMiddleName = editBioInput.middleName;
      origCurrentLastName = editBioInput.currentLastName;

      lastReformattedBioText = editBioOutput.bioText;

      updateButton();

      if (editBioOutput.birthDate != editBioInput.birthDate) {
        birthDateTextBox.value = editBioOutput.birthDate;
      }
      if (editBioOutput.birthDateIsBefore && !editBioInput.birthDateIsBefore) {
        document.querySelector('input[name=mStatus_BirthDate][value="before"]').checked = true;
      }

      if (editBioOutput.deathDate != editBioInput.deathDate) {
        deathDateTextBox.value = editBioOutput.deathDate;
      }
      if (editBioOutput.deathDateIsBefore && !editBioInput.deathDateIsBefore) {
        document.querySelector('input[name=mStatus_DeathDate][value="before"]').checked = true;
      }

      if (editBioOutput.currentLastName != editBioInput.currentLastName) {
        document.getElementById("mLastNameCurrent").value = editBioOutput.currentLastName;
      }

      if (editBioOutput.firstName != editBioInput.firstName) {
        document.getElementById("mFirstName").value = editBioOutput.firstName;
      }

      if (editBioOutput.prefName != editBioInput.prefName) {
        document.getElementById("mRealName").value = editBioOutput.prefName;
      }

      if (editBioOutput.middleName != editBioInput.middleName) {
        document.getElementById("mMiddleName").value = editBioOutput.middleName;
      }

      const extensionVersion = chrome.runtime.getManifest().version;
      const changeSummary = "Reformatted by the WikiTreeAGC extension version " + extensionVersion;

      // Let the page know that changes have been made so that the "Save Changes" button works
      var inputEvent = new Event("input", { bubbles: true });
      textbox.dispatchEvent(inputEvent);
      var changeEvent = new Event("change", { bubbles: true });
      textbox.dispatchEvent(changeEvent);

      const changeSummaryTextBox = document.getElementById("wpSummary");
      changeSummaryTextBox.value = changeSummary;

      // After the draft system was introduced the change event was not enough so do an input event first
      var summaryInputEvent = new Event("input", { bubbles: true });
      changeSummaryTextBox.dispatchEvent(summaryInputEvent);
      var summaryChangeEvent = new Event("change", { bubbles: true });
      changeSummaryTextBox.dispatchEvent(summaryChangeEvent);
    }

    if (enhancedEditorWasOn) {
      // turn enhanced editor back on
      enhancedEditorButton.click();
    }

    if (!editBioOutput.succeeded) {
      // AGC failed
      // display error message
      displayErrorDialog(editBioOutput.errorMessage);
    }
  });
}

function undoEditBio() {
  // console.log("undoEditBio");

  // Need to check if the enhanced editor is enabled and if so turn it off
  var enhancedEditorButton = document.getElementById("toggleMarkupColor");
  var enhancedEditorWasOn = false;
  if (enhancedEditorButton != undefined && enhancedEditorButton.value == "Turn Off Enhanced Editor") {
    enhancedEditorButton.click();
    enhancedEditorWasOn = true;
  }

  document.getElementById("wpTextbox1").value = origBioText;

  document.getElementById("mBirthDate").value = origBirthDate;
  document.querySelector('input[name=mStatus_BirthDate][value="before"]').checked = origBirthDateIsBefore;
  document.getElementById("mDeathDate").value = origDeathDate;
  document.querySelector('input[name=mStatus_DeathDate][value="before"]').checked = origDeathDateIsBefore;
  document.getElementById("mFirstName").value = origFirstName;
  document.getElementById("mRealName").value = origPrefName;
  document.getElementById("mMiddleName").value = origMiddleName;
  document.getElementById("mLastNameCurrent").value = origCurrentLastName;

  lastReformattedBioText = "";

  isBioEdited = false;
  updateButton();

  if (enhancedEditorWasOn) {
    // turn enhanced editor back on
    enhancedEditorButton.click();
  }
}

function onButtonClicked() {
  removeErrorDialog(); // remove error dialog if it is showing

  if (isBioEdited) {
    let hasChangedSinceAGCRun = document.getElementById("wpTextbox1").value != lastReformattedBioText;
    let hasWarningBeenIgnored =
      bioTextWhenUndoWarningDisplayed && bioTextWhenUndoWarningDisplayed == document.getElementById("wpTextbox1").value;
    if (!hasChangedSinceAGCRun || hasWarningBeenIgnored) {
      undoEditBio();
      bioTextWhenUndoWarningDisplayed = "";
    } else {
      displayErrorDialog(
        "The text has been edited since AGC was run, performing an undo will lose your edits. If you wish to proceed then press the undo button again."
      );
      bioTextWhenUndoWarningDisplayed = document.getElementById("wpTextbox1").value;
    }
  } else {
    doEditBio();
  }
}

function initAgc() {
  // We only create the toolbar button if this looks like a profile gerenated by GEDCOMpare.
  if (checkForGedcomCreatedProfile()) {
    var toolbar = document.getElementById("toolbar");

    agcButton = document.createElement("img");
    agcButton.className = "mw-toolbar-editbutton";
    agcButton.src = chrome.runtime.getURL("images/agc.png");
    agcButton.border = "0";
    agcButton.alt = "Ancestry GEDCOM Cleanup";
    agcButton.title = "Ancestry GEDCOM Cleanup";
    agcButton.style = "cursor: pointer;";

    // This adds it on the left side of the toolbar
    toolbar.insertBefore(agcButton, toolbar.firstChild);

    agcButton.addEventListener("click", onButtonClicked, false);
  }
}

checkIfFeatureEnabled("agc").then((result) => {
  if (result) {
    initAgc();
  }
});
